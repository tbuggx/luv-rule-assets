name: Update Rule Assets

on:
  # 提交代码时运行一次
  push:
    branches:
      - main
      - master
  schedule:
    - cron: '0 0 * * *'  # 每天运行一次
  workflow_dispatch:     # 允许手动触发

# 添加权限配置
permissions:
  contents: write

jobs:
  update-rules:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Download rules
      run: |
        # 创建 Python 脚本
        cat > download_rules.py << 'EOF'
        import os
        import requests
        
        def ensure_dir(file_path):
          directory = os.path.dirname(file_path)
          if not os.path.exists(directory):
            os.makedirs(directory)
        
        def download_file(url, local_path):
          try:
            response = requests.get(url)
            response.raise_for_status()
          except Exception as e:
            print(f"Failed to load URL {url}: {str(e)}")
            return

          # 创建本地文件路径
          ensure_dir(local_path)
          # 获取下载文件内容
          content = response.content

          # google.txt
          if local_path.endswith('google.txt'):
            # - 添加 Gemini 域名
            content = content + b'  - \'+.gemini.google.com\''
          # OpenAI.list
          if local_path.endswith('OpenAI.list'):
            # - 移除 challenges.cloudflare.com 域名
            content = re.sub(rb'(?m)^DOMAIN-SUFFIX,challenges\.cloudflare\.com$', rb'# \0', content)
          
          # 写入文件
          with open(local_path, 'wb') as f:
            f.write(content)
          print(f"Downloaded: {url} -> {local_path}")
        
        def cache_file_list(file_path):
          # 检查文件是否存在
          if not os.path.exists(file_path):
            print(f"File not found: {file_path}")
            return

          # 读取 file_path
          with open(file_path, 'r') as f:
            urls = [line.strip() for line in f if line.strip() and line.strip().startswith('https://')]

          # 取得文件名，不包括扩展名
          filename = os.path.splitext(os.path.basename(file_path))[0] 
          # 下载每个文件
          for url in urls:
            if url.startswith('https://cdn.jsdelivr.net/gh/'):
              # 解析路径
              path_parts = url.split('gh/')[1].split('/')
              local_path = os.path.join(filename, *path_parts)
              try:
                download_file(url, local_path)
              except Exception as e:
                print(f"Error downloading {url}: {str(e)}")
            if url.startswith('https://raw.githubusercontent.com/'):
              # 解析路径
              path_parts = url.split('raw.githubusercontent.com/')[1].split('/')
              local_path = os.path.join(filename, *path_parts)
              try:
                download_file(url, local_path)
              except Exception as e:
                print(f"Error downloading {url}: {str(e)}")

        # 缓存通用图标资源
        cache_file_list('icon.txt')
        # 缓存 Loon 资源
        cache_file_list('clash.txt')
        # 缓存 Loon 资源
        cache_file_list('loon.txt')
        # 缓存 QuantumultX 资源
        cache_file_list('quanx.txt')
        EOF
        
        # 安装依赖并运行脚本
        pip install requests
        python download_rules.py

    - name: Commit and push changes
      run: |
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config user.name "github-actions[bot]"
        git add .
        git commit -m "Update rule assets" || echo "No changes to commit"
        git push
